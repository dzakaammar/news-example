// Code generated by mockery v1.0.0
package mocks

import domain "github.com/dzakaammar/news-example/domain"
import mock "github.com/stretchr/testify/mock"

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateNews provides a mock function with given fields: Title, Content, Status, Topics
func (_m *Service) CreateNews(Title string, Content string, Status string, Topics []string) error {
	ret := _m.Called(Title, Content, Status, Topics)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string) error); ok {
		r0 = rf(Title, Content, Status, Topics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllNews provides a mock function with given fields: FilterBy
func (_m *Service) GetAllNews(FilterBy map[string][]string) ([]*domain.News, error) {
	ret := _m.Called(FilterBy)

	var r0 []*domain.News
	if rf, ok := ret.Get(0).(func(map[string][]string) []*domain.News); ok {
		r0 = rf(FilterBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.News)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string][]string) error); ok {
		r1 = rf(FilterBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTopic provides a mock function with given fields:
func (_m *Service) GetAllTopic() ([]*domain.Topic, error) {
	ret := _m.Called()

	var r0 []*domain.Topic
	if rf, ok := ret.Get(0).(func() []*domain.Topic); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveNews provides a mock function with given fields: ID
func (_m *Service) RemoveNews(ID uint) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveTopic provides a mock function with given fields: ID
func (_m *Service) RemoveTopic(ID uint) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
