// Code generated by mockery v1.0.0
package mocks

import domain "github.com/dzakaammar/news-example/domain"
import mock "github.com/stretchr/testify/mock"

// TopicRepository is an autogenerated mock type for the TopicRepository type
type TopicRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ID
func (_m *TopicRepository) Find(ID uint) (*domain.Topic, error) {
	ret := _m.Called(ID)

	var r0 *domain.Topic
	if rf, ok := ret.Get(0).(func(uint) *domain.Topic); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *TopicRepository) List() ([]*domain.Topic, error) {
	ret := _m.Called()

	var r0 []*domain.Topic
	if rf, ok := ret.Get(0).(func() []*domain.Topic); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Topic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: topic
func (_m *TopicRepository) Remove(topic *domain.Topic) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: topic
func (_m *TopicRepository) Store(topic *domain.Topic) error {
	ret := _m.Called(topic)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Topic) error); ok {
		r0 = rf(topic)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
